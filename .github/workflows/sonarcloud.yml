name: SonarCloud analysis

on:
  push:
    branches: [ "main", "develop2", "develop" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  pull-requests: read # allows SonarCloud to decorate PRs with analysis results

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          #cache: 'gradle'
      - run: |
          chmod +x gradlew; ./gradlew clean build -x test
          pwd
          ls -la
  sonar:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: list files
        run: |
          ls -la
          echo $GITHUB_WORKSPACE
          cd /${{ github.workspace }}/
          ls -R
          echo evento: ${{ github.event_name }}
          echo repositorio: ${{ github.repository }}
          echo workspace: ${{ github.workspace }}

      - name: Download and extract SonarScanner
        run: |
          curl -LJO https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
          unzip sonar-scanner-cli-5.0.1.3006-linux.zip

      - name: Upload SonarScanner as artifact
        uses: actions/upload-artifact@v2
        with:
          name: sonar-scanner
          path: sonar-scanner-5.0.1.3006-linux

      - name: Download SonarScanner artifact
        uses: actions/download-artifact@v2
        with:
          name: sonar-scanner
          path: sonar-scanner

      #- name: SonarCloud Action Setup
      #  uses: SonarSource/sonarcloud-github-action@master
      - name: Sonar Scanner
        run: |
          ./sonar-scanner/bin/sonar-scanner \
          -Dsonar.projectKey=mandinga27_spring-boot-backend-apirest \
          -Dsonar.organization=mandinga27 \
          -Dsonar.java.binaries=${{ github.workspace }}/build/libs \
          -Dsonar.sources=${{ github.workspace }}/src \
          -Dsonar.qualitygate.wait=true \
          -Dsonar.gradle.skipCompile=true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONARCLOUD_TOKEN }}
        #uses: jinguji/sonarcloud-gradle-github-action@v2


      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        # Force to fail step after specific time.
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONARCLOUD_TOKEN }}
          SONAR_HOST_URL: https://sonarcloud.io #OPTIONAL
            # Optionally you can use the output from the Quality Gate in another step.
          # The possible outputs of the `quality-gate-status` variable are `PASSED`, `WARN` or `FAILED`.
      - name: "Example show SonarQube Quality Gate Status value"
        run: echo "The Quality Gate status is ${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}"